import multiprocessing
from tqdm import tqdm
import numpy as np
import imageio
import array
import os


def generate_and_save_image(input_filename, output_filename, width):
    f = open(input_filename, 'rb')
    ln = os.path.getsize(input_filename)  # length of file in bytes
    if width == 0:
        width = ln
    if ln == 0:
        return
    rem = ln % width
    a = array.array("B")  # uint8 array
    a.fromfile(f, ln - rem)
    f.close()
    g = np.reshape(a, (len(a) // width, width))
    g = np.uint8(g)
    imageio.imwrite(output_filename, g)  # save the image


def convert_bin_to_img(input_dir, width, max_files=0):
        output_dir = input_dir + '_width_' + str(width)

        if not os.path.isdir(output_dir):
            os.mkdir(output_dir)

        list_dirs = os.listdir(input_dir)
        with multiprocessing.Pool(multiprocessing.cpu_count()) as pool:

            jobs = []
            results = []
            total_count = 0

            for dirname in list_dirs:
                list_files = os.listdir(os.path.join(input_dir, dirname))
                count = 0
                for filename in list_files:
                    input_filename = os.path.join(input_dir, dirname, filename)
                    try:    
                        output_filename = os.path.splitext(os.path.basename(input_filename))[0] + '.png'
                        output_class_dir = os.path.join(output_dir, dirname)
                        if not os.path.isdir(output_class_dir):
                            os.mkdir(output_class_dir)
                        output_filename = os.path.join(output_dir, dirname, output_filename)

                        jobs.append(
                            pool.apply_async(generate_and_save_image, (input_filename, output_filename, width)))
                        count += 1
                        if max_files > 0 and max_files == count:
                            break
                    except:
                        print('Ignoring ', filename)

                total_count += count
            tqdm_desc = 'Converting Malware bins to images for width ' + str(width)
            for job in tqdm(jobs, desc=tqdm_desc):
                results.append(job.get())
    #https://stackoverflow.com/questions/66464282/why-am-i-getting-and-how-to-solve-valueerror-zero-size-array-to-reduction-opera
    #Converting Malware bins to images for width 0: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████| 2999/2999 [00:22<00:00, 134.71it/s]
    # Converting Malware bins to images for width 1: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 2999/2999 [01:34<00:00, 31.85it/s]
    # Converting Malware bins to images for width 64:  90%|████████████████████████████████████████████████████████████████████████████████████████████▌          | 2696/2999 [00:24<00:02, 108.93it/s]
    # Converting Malware bins to images for width 128:  77%|███████████████████████████████████████████████████████████████████████████████                       | 2324/2999 [00:22<00:06, 104.39it/s]
    # Converting Malware bins to images for width 256:  77%|███████████████████████████████████████████████████████████████████████████████                       | 2324/2999 [00:22<00:06, 103.99it/s]
    # Converting Malware bins to images for width 512:  77%|███████████████████████████████████████████████████████████████████████████████▊                       | 2324/2999 [00:23<00:06, 98.60it/s]
    # Converting Malware bins to images for width 1024:  77%|██████████████████████████████████████████████████████████████████████████████▎

#Reproducing error without try except clause

# python3 data_preprocess.py --bin_to_img
# Converting Malware bins to images for width 0: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████| 2999/2999 [00:21<00:00, 137.49it/s]
# Converting Malware bins to images for width 1: 100%|█████████████████████████████████████████████████████████████████████████████████████████████████████████| 2999/2999 [01:33<00:00, 31.94it/s]
# Converting Malware bins to images for width 64:  90%|████████████████████████████████████████████████████████████████████████████████████████████▌          | 2696/2999 [00:24<00:02, 111.09it/s]
# multiprocessing.pool.RemoteTraceback: 
# """
# Traceback (most recent call last):
#   File "/usr/lib/python3.8/multiprocessing/pool.py", line 125, in worker
#     result = (True, func(*args, **kwds))
#   File "/home/javier/Desktop/CSIT_AI/CV/data_utils/bin_to_img.py", line 22, in generate_and_save_image
#     imageio.imwrite(output_filename, g)  # save the image
#   File "/home/javier/.local/lib/python3.8/site-packages/imageio/v2.py", line 264, in imwrite
#     return file.write(im, **kwargs)
#   File "/home/javier/.local/lib/python3.8/site-packages/imageio/core/legacy_plugin_wrapper.py", line 253, in write
#     writer.append_data(image, metadata)
#   File "/home/javier/.local/lib/python3.8/site-packages/imageio/core/format.py", line 590, in append_data
#     return self._append_data(im, total_meta)
#   File "/home/javier/.local/lib/python3.8/site-packages/imageio/plugins/pillow_legacy.py", line 458, in _append_data
#     PillowFormat.Writer._append_data(self, im, meta)
#   File "/home/javier/.local/lib/python3.8/site-packages/imageio/plugins/pillow_legacy.py", line 375, in _append_data
#     img = ndarray_to_pil(
#   File "/home/javier/.local/lib/python3.8/site-packages/imageio/plugins/pillow_legacy.py", line 801, in ndarray_to_pil
#     elif prefer_uint8 and arr.max() < 256 and arr.min() >= 0:
#   File "/home/javier/.local/lib/python3.8/site-packages/numpy/core/_methods.py", line 40, in _amax
#     return umr_maximum(a, axis, None, out, keepdims, initial, where)
# ValueError: zero-size array to reduction operation maximum which has no identity
# """

# The above exception was the direct cause of the following exception:

# Traceback (most recent call last):
#   File "data_preprocess.py", line 75, in <module>
#     main()
#   File "data_preprocess.py", line 21, in main
#     convert_bin_to_img(ORG_DATASET_PATH, width, max_files=max_files)
#   File "/home/javier/Desktop/CSIT_AI/CV/data_utils/bin_to_img.py", line 61, in convert_bin_to_img
#     results.append(job.get())
#   File "/usr/lib/python3.8/multiprocessing/pool.py", line 771, in get
#     raise self._value
# ValueError: zero-size array to reduction operation maximum which has no identity


# My conclusion is to ignore if it is not 100%, I tried using other script (i.e. test_binimg.py)to reproduce greyscale image, but also have the same issues. 
# Could be the malware executables issues. To further prove my hypthosesis, I tried with other PE malware datasets (Desktop/Playground directory) and it works.
